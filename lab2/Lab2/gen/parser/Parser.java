package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short RPAREN = 9;
		static public final short VOID = 10;
		static public final short BOOLEAN = 11;
		static public final short INT = 12;
		static public final short LCURLY = 13;
		static public final short SEMICOLON = 14;
		static public final short RBRACKET = 15;
		static public final short RCURLY = 16;
		static public final short IF = 17;
		static public final short WHILE = 18;
		static public final short BREAK = 19;
		static public final short RETURN = 20;
		static public final short COMMA = 21;
		static public final short EQL = 22;
		static public final short PLUS = 23;
		static public final short TIMES = 24;
		static public final short DIV = 25;
		static public final short MOD = 26;
		static public final short TYPE = 27;
		static public final short MODULE = 28;
		static public final short IMPORT = 29;
		static public final short PUBLIC = 30;
		static public final short ELSE = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LT = 34;
		static public final short LEQ = 35;
		static public final short GT = 36;
		static public final short GEQ = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pDLsTqL4KOlMyt45SWXH1280L282OXX9W44D8WbG2XY0ZsNh7t2cfK16m8$ppg3uyOHIo" +
		"03HHK535OWeeO54L1h0IHY1BXyxxPsUVRj$lY7lmXctDdldBdldapysOcWASMnw463JWRvI" +
		"Z1LHY1aKZ3DRWUYKX27oIZB$eX1Qb8Y9ZPEs9cXYipsy6qymOhtYMu59VXSbo1A#71CQvAk" +
		"PqesNd37BoRS0hEmIISYRDmFYwG9RWLip470z0L3yetoCGG5A3GoOFNuaKXkXFU0nPl32ew" +
		"uNMnU3rKFrru8XPlF2PWegjUZ0lFFYudgd6nHquFYGnLaOMOwj2VWicASmAAGdAd1YaKXsY" +
		"ELX57AtawY7DIIAjpGo8NXTDXpmACCjmI0Vz8yxkZ6dDnbre5Hz7ouMXqqxCPBxkqrGjLk8" +
		"rhgX9ncZlVUlEnbZKESwKDDsCQ6X6BdgYMRtNxEjGIzPY72p5DccGdyIkkbJsuWSepwRVX7" +
		"ip47KX7VsHX4F8m43dqZqKfXYCVnsCKfcE6BCN9v9s6C#H9d8UBgJSBLpDxEwx3ZRXJlfVl" +
		"S3TdOW7kmxsu7mzX4R$jB7xBsTJBvRhCuohBvvTPGEr2hgTYwlldUjJ$oWpbzUVtbC5noEH" +
		"uf73q3byfFC$W7kVbZjA5kqyqPt#ocllkt1FCsOf3FESmWNFlv1aMhmTPxhmqYrVAhyETLs" +
		"Fn$Frquy7Y#VVKV#zVC2zqN2A9f8Re1pWDtFUSkKaHQJfR#GwpRsuzCncn4V2FDB#Ijg5Nm" +
		"JXQ$jF4Fvi#lJTrvqfAubvahgagpUrdUzT$B4FhZo5wK3bEjoz7XKACofgwiOff8edt2P#o" +
		"4lbdaECZnykswVHZk5kQaT6yZ$Yunvj8PEiImbJnC1D3ZAKTozAdj4prBcmHe$I0nNEWVZN" +
		"44k8nlszuM3n2x31zEvZRp68$wqF4LgALQ6TiFkijMkzHslkSRODrF2b4dEOlfzrJnrFPDe" +
		"zrRphhTIoAnLPjfp7Vo3gTJfkE9Uc#fMi$sV6iNimjqCygeRr8ypVf#c52WjkWHUSUPx4p$" +
		"3iOIstFwAPZTRGpTAmhaSdO2jPzTNurxG4wpt7s37HehcCinn7RoDWWeZ1SFsnzoDPrF96h" +
		"xGHYYDRvYvWLfbqqKSHS1#jOefWeqxa#H86sAmXpRag9uGwDAcAaRVogRFOyOYhr5uRlDvw" +
		"mlMjJm1QHLflTrjcxXz6CSlXvkawsnSfizXvTJmrkPyIxFyC8pEbsOf9ktwXZd3DZcOE$GT" +
		"SjHBEBfiTcxzQQssmntKzZ2B5NvtVPykrXD8l3nFJy6XrkxnS9sFuWCJrCVB#krn07$iipz" +
		"3ikXlx9GJaWUrbto9$oX#o7uoU$gtAxV2rVoJRvKhwGhIhIgihFBTuM#OpbPil$bFY4#9ZO" +
		"91$9XxAIrWVo7iiDibRUPBrMtf0ryhgiajVehPBLyggy8Y$BI$HUb9NIBEyhhHLQiqcUKlL" +
		"oLRuWpyjpodfMbiapocgMZVAkh9Ttv6rP9synqgBYFwho9sbc#OFibb$avw2ttA7ATilV9x" +
		"$98MNnAySCtg6wSb$tgBszZkT6BUrQskPf5i1udWeJU1vD9BUIVYNp#UhSysEO3GNK2A2AM" +
		"lpUUQvu2V1Sy$1#QGAysnckA2I$Y2ZcALHFlvxsSDeZs7QaWfUtGG$l28P27lt1wYoB8g3k" +
		"3KCPgsOT3hdabZ5VHcufVHCvZ5KmLi5OEVq0iXJC$wqD8ehmQZi0ByzkGw61l0QOPuVNF3z" +
		"uj$9Woj$81Kvb");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [1] Imports = Imports Import; returns 'Import' although none is marked
			Action.NONE,  	// [2] Imports = 
			RETURN3,	// [3] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [4] Declarations = Declarations Declaration; returns 'Declaration' although none is marked
			Action.NONE,  	// [5] Declarations = 
			Action.RETURN,	// [6] Declaration = Function_Declaration
			Action.RETURN,	// [7] Declaration = Field_Declaration
			Action.RETURN,	// [8] Declaration = Type_Declaration
			RETURN9,	// [9] Function_Declaration = Accessibility TypeName ID LPAREN Parameter_List RPAREN LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [10] Field_Declaration = Accessibility TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [11] Type_Declaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [12] Accessibility = PUBLIC
			Action.NONE,  	// [13] Accessibility = 
			Action.RETURN,	// [14] TypeName = Primitive_Type
			Action.RETURN,	// [15] TypeName = Array_Type
			Action.RETURN,	// [16] TypeName = ID
			Action.RETURN,	// [17] Primitive_Type = VOID
			Action.RETURN,	// [18] Primitive_Type = BOOLEAN
			Action.RETURN,	// [19] Primitive_Type = INT
			RETURN3,	// [20] Array_Type = Array_Type LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [21] Array_Type = Primitive_Type LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [22] Array_Type = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN2,	// [23] Parameter_List = Parameter Parameter_List_Tail; returns 'Parameter_List_Tail' although none is marked
			Action.NONE,  	// [24] Parameter_List = 
			RETURN3,	// [25] Parameter_List_Tail = COMMA Parameter Parameter_List_Tail; returns 'Parameter_List_Tail' although none is marked
			Action.NONE,  	// [26] Parameter_List_Tail = 
			RETURN2,	// [27] Parameter = TypeName ID; returns 'ID' although none is marked
			RETURN2,	// [28] Statements = Statement Statements; returns 'Statements' although none is marked
			Action.NONE,  	// [29] Statements = 
			Action.RETURN,	// [30] Statement = Local_Variable_Declaration
			Action.RETURN,	// [31] Statement = Block_Statements
			Action.RETURN,	// [32] Statement = If_Statement
			Action.RETURN,	// [33] Statement = While_Statement
			Action.RETURN,	// [34] Statement = Break_Statement
			Action.RETURN,	// [35] Statement = Return_Statement
			Action.RETURN,	// [36] Statement = Expr_Statement
			RETURN3,	// [37] Local_Variable_Declaration = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [38] Block_Statements = LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN5,	// [39] If_Statement = IF LPAREN Expression RPAREN Statement_Tail; returns 'Statement_Tail' although none is marked
			Action.RETURN,	// [40] Statement_Tail = Statement
			RETURN3,	// [41] Statement_Tail = Statement ELSE Statement; returns 'Statement' although none is marked
			RETURN5,	// [42] While_Statement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [43] Break_Statement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [44] Return_Statement = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [45] Return_Statement = RETURN Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [46] Expr_Statement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [47] Expression = Assignment
			Action.RETURN,	// [48] Expression = Right_Hand_Side_Expression
			RETURN3,	// [49] Assignment = Left_Hand_Side_Expression EQL Expression; returns 'Expression' although none is marked
			RETURN2,	// [50] Left_Hand_Side_Expression = ID Array_Access; returns 'Array_Access' although none is marked
			RETURN4,	// [51] Array_Access = LBRACKET Expression RBRACKET Array_Access; returns 'Array_Access' although none is marked
			Action.NONE,  	// [52] Array_Access = 
			Action.RETURN,	// [53] Right_Hand_Side_Expression = Arithmetic_Expression
			RETURN3,	// [54] Right_Hand_Side_Expression = Arithmetic_Expression Comparison_Operator Arithmetic_Expression; returns 'Arithmetic_Expression' although none is marked
			Action.RETURN,	// [55] Comparison_Operator = EQEQ
			Action.RETURN,	// [56] Comparison_Operator = NEQ
			Action.RETURN,	// [57] Comparison_Operator = LT
			Action.RETURN,	// [58] Comparison_Operator = LEQ
			Action.RETURN,	// [59] Comparison_Operator = GT
			Action.RETURN,	// [60] Comparison_Operator = GEQ
			RETURN2,	// [61] Arithmetic_Expression = Term Arithmetic_Expression_Tail; returns 'Arithmetic_Expression_Tail' although none is marked
			RETURN3,	// [62] Arithmetic_Expression_Tail = Additive_Operator Term Arithmetic_Expression_Tail; returns 'Arithmetic_Expression_Tail' although none is marked
			Action.NONE,  	// [63] Arithmetic_Expression_Tail = 
			Action.RETURN,	// [64] Additive_Operator = PLUS
			Action.RETURN,	// [65] Additive_Operator = MINUS
			RETURN2,	// [66] Term = Factor Term_Tail; returns 'Term_Tail' although none is marked
			RETURN3,	// [67] Term_Tail = Multiplicative_Operator Term Term_Tail; returns 'Term_Tail' although none is marked
			Action.NONE,  	// [68] Term_Tail = 
			Action.RETURN,	// [69] Multiplicative_Operator = TIMES
			Action.RETURN,	// [70] Multiplicative_Operator = DIV
			Action.RETURN,	// [71] Multiplicative_Operator = MOD
			Action.RETURN,	// [72] Factor = Primary_Expression
			RETURN2,	// [73] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [74] Primary_Expression = Left_Hand_Side_Expression
			RETURN4,	// [75] Primary_Expression = ID LPAREN Expression_List RPAREN; returns 'RPAREN' although none is marked
			RETURN3,	// [76] Primary_Expression = LBRACKET Expression_List_Non_Empty RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [77] Primary_Expression = STRING_LITERAL
			Action.RETURN,	// [78] Primary_Expression = INT_LITERAL
			Action.RETURN,	// [79] Primary_Expression = BOOLEAN_LITERAL
			RETURN3,	// [80] Primary_Expression = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [81] BOOLEAN_LITERAL = TRUE
			Action.RETURN,	// [82] BOOLEAN_LITERAL = FALSE
			RETURN2,	// [83] Expression_List = Expression Expression_List_Tail; returns 'Expression_List_Tail' although none is marked
			Action.NONE,  	// [84] Expression_List = 
			RETURN3,	// [85] Expression_List_Tail = COMMA Expression Expression_List_Tail; returns 'Expression_List_Tail' although none is marked
			Action.NONE,  	// [86] Expression_List_Tail = 
			RETURN2	// [87] Expression_List_Non_Empty = Expression Expression_List_Tail; returns 'Expression_List_Tail' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
